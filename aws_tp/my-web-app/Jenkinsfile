pipeline {
    agent any

    environment {
        DOCKER_IMAGE_NAME = 'mon-image-docker'
        DOCKER_TAG = 'latest'
        DOCKER_REGISTRY = 'docker.io'
        DOCKER_REPO = 'fatihmedamine/simple-jenkins-app' // Ton repository Docker Hub
    }

    stages {
        stage('Clonage du D√©p√¥t') {
            steps {
                script {
                    echo 'üìÇ Clonage du d√©p√¥t GitHub...'
                    git url: 'https://github.com/AnasIchmawin/Mini_projet_Docker.git', branch: 'main'
                }
            }
        }

        stage('Build Docker Image') {
            steps {
                script {
                    echo "üîß Construction de l'image Docker..."
                    sh 'docker build -t docker.io/fatihmedamine/simple-jenkins-app:latest -f aws_tp/my-web-app/Dockerfile .'
                }
            }
        }
        stage('Build Docker Image') {
            steps {
                script {
                    echo "üîß Construction de l'image Docker..."
                    sh '''
                        docker build -t $DOCKER_REGISTRY/$DOCKER_REPO:$DOCKER_TAG .
                    '''
                }
            }
        }

        stage('Test Docker') {
            steps {
                script {
                    echo 'üü¢ Lancement des tests dans Docker...'
                    sh '''
                        docker run --rm $DOCKER_REGISTRY/$DOCKER_REPO:$DOCKER_TAG sh -c "echo 'Lancer les tests ici'"
                    '''
                }
            }
        }

        stage('Push Docker Image') {
            steps {
                script {
                    echo "üöÄ Pousser l'image Docker sur Docker Hub..."
                    withCredentials([usernamePassword(credentialsId: 'docker-hub-credentials', usernameVariable: 'DOCKER_USERNAME', passwordVariable: 'DOCKER_PASSWORD')]) {
                        sh '''
                            echo "$DOCKER_PASSWORD" | docker login -u "$DOCKER_USERNAME" --password-stdin
                            docker push $DOCKER_REGISTRY/$DOCKER_REPO:$DOCKER_TAG
                        '''
                    }
                }
            }
        }
    }

    post {
        always {
            echo "üßπ Nettoyage de l'environnement..."
            sh 'docker system prune -f'
        }
        success {
            echo '‚úÖ Pipeline termin√© avec succ√®s !'
        }
        failure {
            echo '‚ùå √âchec du pipeline !'
        }
    }
}
