pipeline {
    agent any

    environment {
        DOCKER_USER = 'fatihmedamine'
        DOCKER_IMG_NAME = 'my-new-img'
    }

    stages {
        stage('Cloner le repo') {
            steps {
                echo 'üì• Clonage du d√©p√¥t'
                git 'https://github.com/AnasIchmawin/Mini_projet_Docker'
            }
        }

        stage('Nettoyer les anciens conteneurs') {
            steps {
                script {
                    echo "üßπ Nettoyage des anciens conteneurs Docker"

                    // Stop & remove old containers by image name
                    sh '''
                        docker ps -q --filter ancestor=my-web-img | xargs -r docker stop
                        docker ps -q --filter ancestor=my-web-img | xargs -r docker rm
                        docker ps -q --filter ancestor=$DOCKER_USER/$DOCKER_IMG_NAME | xargs -r docker stop
                        docker ps -q --filter ancestor=$DOCKER_USER/$DOCKER_IMG_NAME | xargs -r docker rm
                    '''

                    // V√©rifie si le port 8081 est occup√© et le lib√®re si n√©cessaire
                    def pid = sh(script: "lsof -t -i:8081 || true", returnStdout: true).trim()
                    if (pid) {
                        echo "‚ö†Ô∏è Port 8081 utilis√© par le PID $pid. Lib√©ration..."
                        sh "kill -9 $pid || true"
                        sh "sleep 2"
                    } else {
                        echo "‚úÖ Port 8081 est d√©j√† libre."
                    }
                }
            }
        }

        stage('Build') {
            steps {
                dir('aws_tp/my-web-app') {
                    echo 'üèó Construction de l\'image Docker'
                    sh 'docker build -t my-web-img .'
                }
            }
        }

        stage('Test') {
            steps {
                script {
                    echo 'üß™ Lancement du test du conteneur sur le port 8081'
                    sh 'docker rm -f test-container-24 || true'
                    sh 'docker run -d -p 8081:80 --name test-container-24 my-web-img'
                    sh 'sleep 5' // Attendre un peu que le conteneur d√©marre
                    sh 'curl -I http://localhost:8081 || true'
                }
            }
        }

        stage('Release') {
            steps {
                script {
                    echo 'üì¶ Publication de l\'image sur Docker Hub'
                    withCredentials([usernamePassword(credentialsId: 'dockerhub-credentials', usernameVariable: 'DOCKER_USER', passwordVariable: 'DOCKER_PASS')]) {
                        sh '''
                            echo "$DOCKER_PASS" | docker login -u "$DOCKER_USER" --password-stdin
                            docker tag my-web-img $DOCKER_USER/$DOCKER_IMG_NAME
                            docker push $DOCKER_USER/$DOCKER_IMG_NAME
                        '''
                    }
                }
            }
        }

        stage('Deploy in Review') {
            steps {
                script {
                    echo 'üöÄ D√©ploiement de l\'image en Review'
                    sh 'docker run -d -p 8081:80 --name deploy-24 $DOCKER_USER/$DOCKER_IMG_NAME'
                }
            }
        }
    }

    post {
        always {
            script {
                echo "üßΩ Nettoyage post-pipeline"
                sh "docker rm -f test-container-24 || true"
                sh "docker ps -q --filter ancestor=my-web-img | xargs -r docker stop"
                sh "docker ps -q --filter ancestor=my-web-img | xargs -r docker rm"
            }
        }

        failure {
            echo "‚ùå Pipeline √©chou√©. V√©rifiez les logs."
        }
    }
}
