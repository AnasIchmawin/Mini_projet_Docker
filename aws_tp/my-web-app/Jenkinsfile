pipeline {
    agent any

    environment {
        IMAGE_NAME = 'my-web-img'
        CONTAINER_NAME = "test-container-${env.BUILD_ID}"
    }

    stages {
        stage('📥 Cloner le repo') {
            steps {
                echo '📥 Clonage du dépôt'
                git branch: 'main', url: 'https://github.com/AnasIchmawin/Mini_projet_Docker'
            }
        }

        stage('🧹 Nettoyer les anciens conteneurs') {
            steps {
                echo '🧹 Nettoyage des anciens conteneurs Docker'
                sh '''
                    docker rm -f $(docker ps -aq --filter "ancestor=${IMAGE_NAME}") || true
                '''
            }
        }

        stage('⚙️ Build') {
            steps {
                echo '⚙️ Construction de l\'image Docker'
                sh "docker build -t ${IMAGE_NAME} ./aws_tp/my-web-app"
            }
        }

        stage('✅ Test') {
            steps {
                echo '✅ Tests de l\'application'
                sh "docker run --name ${CONTAINER_NAME} -d ${IMAGE_NAME}"
                // 👉 Tu peux ajouter ici tes tests automatisés
            }
        }

        stage('🚀 Release') {
            steps {
                echo '🚀 Publication de l\'image (optionnel)'
                // Exemple : docker tag / docker push
            }
        }

        stage('📦 Deploy in Review') {
            steps {
                echo '📦 Déploiement en environnement de revue'
                // Exemple : docker-compose up -d ou docker run ...
            }
        }
    }

    post {
        always {
            echo '🧽 Nettoyage post-pipeline'
            sh "docker rm -f ${CONTAINER_NAME} || true"
            sh '''
                docker ps -q --filter ancestor=${IMAGE_NAME} | xargs -r docker stop
                docker ps -q --filter ancestor=${IMAGE_NAME} | xargs -r docker rm
            '''
        }

        failure {
            echo '❌ Pipeline échoué. Vérifiez les logs.'
        }

        success {
            echo '✅ Pipeline terminé avec succès.'
        }
    }
}
