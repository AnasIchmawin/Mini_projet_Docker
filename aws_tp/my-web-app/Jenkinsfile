pipeline {
    agent any
    
    environment {
        APP_PORT = '8087'
        DEPLOY_PORT = '9090'
        CONTAINER_NAME = "test-container-${BUILD_NUMBER}"
    }
    
    stages {
        stage('Cloner le repo') {
            steps {
                echo "clonage"
                git branch: 'main', url: 'https://github.com/AnasIchmawin/Mini_projet_Docker'
            }
        }
        
        stage('Nettoyer les anciens conteneurs') {
            steps {
                script {
                    sh 'docker ps -q --filter "ancestor=my-web-img" | xargs -r docker stop'
                    sh 'docker ps -q --filter "ancestor=my-web-img" | xargs -r docker rm'
                    
                    withCredentials([usernamePassword(credentialsId: 'dockerhub-creds', usernameVariable: 'DOCKER_USER', passwordVariable: 'DOCKER_PASS')]) {
                        sh 'docker ps -q --filter "ancestor=$DOCKER_USER/my-new-img" | xargs -r docker stop'
                        sh 'docker ps -q --filter "ancestor=$DOCKER_USER/my-new-img" | xargs -r docker rm'
                    }
                    
                    sh "netstat -tuln | grep ${APP_PORT} || true"
                    sh "lsof -i :${APP_PORT} | grep LISTEN && { echo 'Killing process using port ${APP_PORT}'; fuser -k ${APP_PORT}/tcp; } || echo 'Port ${APP_PORT} est libre'"
                }
            }
        }
        
        stage('Build') {
            steps {
                dir('aws_tp/my-web-app') {
                    sh 'docker build -t my-web-img .'
                }
            }
        }
        
        stage('Test') {
            steps {
                script {
                    def portInUse = sh(script: "lsof -i :${APP_PORT}", returnStatus: true) == 0
                    if (portInUse) {
                        error "Le port ${APP_PORT} est déjà utilisé. Veuillez libérer le port et réessayer."
                    }
                    sh "docker run -d -p ${APP_PORT}:80 --name ${CONTAINER_NAME} my-web-img"
                    sh 'sleep 5'
                    sh "curl -f http://localhost:${APP_PORT} || exit 1"
                }
            }
        }
        
        stage('Release') {
            steps {
                withCredentials([usernamePassword(credentialsId: 'dockerhub-creds', usernameVariable: 'DOCKER_USER', passwordVariable: 'DOCKER_PASS')]) {
                    sh 'docker login -u $DOCKER_USER -p $DOCKER_PASS'
                    sh 'docker tag my-web-img $DOCKER_USER/my-new-img'
                    sh 'docker push $DOCKER_USER/my-new-img'
                }
            }
        }
        
        stage('Deploy in Review') {
            steps {
                withCredentials([usernamePassword(credentialsId: 'dockerhub-creds', usernameVariable: 'DOCKER_USER', passwordVariable: 'DOCKER_PASS')]) {
                    sh "docker run -d -p ${DEPLOY_PORT}:80 --name deploy-${BUILD_NUMBER} $DOCKER_USER/my-new-img"
                }
            }
        }
    }
    
    post {
        always {
            script {
                try {
                    sh "docker rm -f ${CONTAINER_NAME} || true"
                    sh 'docker ps -q --filter "ancestor=my-web-img" | xargs -r docker stop'
                    sh 'docker ps -q --filter "ancestor=my-web-img" | xargs -r docker rm'
                    
                    withCredentials([usernamePassword(credentialsId: 'dockerhub-creds', usernameVariable: 'DOCKER_USER', passwordVariable: 'DOCKER_PASS')]) {
                        sh 'docker ps -q --filter "ancestor=$DOCKER_USER/my-new-img" | xargs -r docker stop'
                        sh 'docker ps -q --filter "ancestor=$DOCKER_USER/my-new-img" | xargs -r docker rm'
                    }
                } catch (Exception e) {
                    echo "Error during cleanup: ${e.message}"
                }
            }
        }
        
        failure {
            echo "Pipeline échoué. Veuillez vérifier les logs pour plus de détails."
        }
        
        success {
            echo "Pipeline réussi. L'application est déployée et disponible sur le port ${DEPLOY_PORT}."
        }
    }
}
