pipeline {
    agent any
    
    environment {
        // Définir les variables d'environnement
        DOCKER_HUB_USERNAME = credentials('docker-hub-credentials').username
        DOCKER_HUB_PASSWORD = credentials('docker-hub-credentials').password
        IMAGE_NAME = "${DOCKER_HUB_USERNAME}/mini-projet-docker"
        IMAGE_TAG = "${env.BUILD_NUMBER}"
    }
    
    stages {
        stage('Checkout') {
            steps {
                // Récupérer le code depuis GitHub
                echo "Clonage du dépôt Git..."
                checkout scm
            }
        }
        
        stage('Build Docker Image') {
            steps {
                // Se déplacer dans le répertoire où se trouve le Dockerfile
                dir('my-web-app') {
                    echo "Construction de l'image Docker..."
                    sh "docker build -t ${IMAGE_NAME}:${IMAGE_TAG} ."
                    sh "docker tag ${IMAGE_NAME}:${IMAGE_TAG} ${IMAGE_NAME}:latest"
                }
            }
        }
        
        stage('Test Application') {
            steps {
                echo "Test de l'application..."
                
                // Lancer un conteneur temporaire pour tester
                sh "docker run -d --name test-container -p 8080:80 ${IMAGE_NAME}:${IMAGE_TAG}"
                
                // Attendre que le conteneur démarre
                sh "sleep 5"
                
                // Test simple : vérifier si le serveur est actif
                sh "curl -s http://localhost:8080 | grep 'Mini Projet Docker'"
                
                // Nettoyage après le test
                sh "docker stop test-container"
                sh "docker rm test-container"
            }
        }
        
        stage('Push to Docker Hub') {
            steps {
                echo "Publication de l'image sur Docker Hub..."
                
                // Connexion à Docker Hub
                sh "echo ${DOCKER_HUB_PASSWORD} | docker login -u ${DOCKER_HUB_USERNAME} --password-stdin"
                
                // Pousser l'image
                sh "docker push ${IMAGE_NAME}:${IMAGE_TAG}"
                sh "docker push ${IMAGE_NAME}:latest"
                
                // Déconnexion de Docker Hub
                sh "docker logout"
            }
        }
        
        stage('Clean Up') {
            steps {
                echo "Nettoyage des ressources locales..."
                
                // Supprimer les images locales
                sh "docker rmi ${IMAGE_NAME}:${IMAGE_TAG}"
                sh "docker rmi ${IMAGE_NAME}:latest"
            }
        }
    }
    
    post {
        success {
            echo "Pipeline exécuté avec succès! L'image a été construite et publiée sur Docker Hub."
        }
        failure {
            echo "Échec de l'exécution du pipeline. Vérifiez les logs pour plus de détails."
        }
    }
}